{"version":3,"file":"_page.svelte-079961d4.js","sources":["../../../.svelte-kit/adapter-node/entries/pages/async/_page.svelte.js"],"sourcesContent":["import { c as create_ssr_component, e as escape } from \"../../../chunks/ssr.js\";\nconst _page_svelte_svelte_type_style_lang = \"\";\nconst css = {\n  code: \"h3.svelte-xvyccl{color:rgb(187, 248, 204) }\",\n  map: null\n};\nconst Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {\n  var closure = `function dF3x () {};\nvar log = console.log;\nasync function asyncId (x) {return x};\n\nfunction M (x) {\n  return function go (func) {\n      if (func === dF3x) return clone(x);\n      else x = asyncId(x).then(v => func(v));\n      return go;\n  }\n}`;\n  var test = `var m = M(3);\nm(v=>v**3)(v=>3*v)(v=>v+19)(Math.sqrt)(dF3x).then(v => log(v)); // 10 `;\n  $$result.css.add(css);\n  return `<h1 style=\"text-align: center\" data-svelte-h=\"svelte-z7nlbi\">Asynchronous Transformations</h1> <h3 class=\"svelte-xvyccl\" data-svelte-h=\"svelte-cmiygg\">GOAL: Handle both Synchronous and Asynchronous Functions in a Simple Closure</h3> <pre>${escape(closure)}</pre> <p data-svelte-h=\"svelte-1a82hpg\">If some value x is not a Promise, asyncId(x) creates a promise that resolves to x. asyncId(x) has no effect on x if x is a Promise. Using the basic definition of M, the following computation would return the number 10. Here, it returns a promise that resolves to 10</p> <pre>${escape(test)}</pre>`;\n});\nexport {\n  Page as default\n};\n"],"names":[],"mappings":";;AAEA,MAAM,GAAG,GAAG;AACZ,EAAE,IAAI,EAAE,6CAA6C;AACrD,EAAE,GAAG,EAAE,IAAI;AACX,CAAC,CAAC;AACG,MAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,KAAK;AAC5E,EAAE,IAAI,OAAO,GAAG,CAAC;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,CAAC;AACH,EAAE,IAAI,IAAI,GAAG,CAAC;AACd,sEAAsE,CAAC,CAAC;AACxE,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACxB,EAAE,OAAO,CAAC,8OAA8O,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,4TAA4T,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;AAC7lB,CAAC;;;;"}